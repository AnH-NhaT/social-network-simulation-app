{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, CLEAR_DATA } from \"../constants/index\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nexport function reload() {\n  return function (dispatch) {\n    dispatch(clearData());\n    dispatch(fetchUser());\n    dispatch(fetchUserPosts());\n    dispatch(fetchUserFollowing());\n  };\n}\nexport function deletePost(item) {\n  return function (dispatch, getState) {\n    return new Promise(function (resolve, reject) {\n      firebase.firestore().collection('posts').doc(firebase.auth().currentUser.uid).collection(\"userPosts\").doc(item.id).delete().then(function () {\n        resolve();\n      }).catch(function () {\n        reject();\n      });\n    });\n  };\n}\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i], true));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log('does not exist');\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.query._.C_.path.segments[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n\n      for (var i = 0; i < posts.length; i++) {\n        dispatch(fetchUsersFollowingLikes(uid, posts[i].id));\n      }\n\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").doc(postId).collection(\"likes\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var currentUserLike = false;\n\n      if (snapshot.exists) {\n        currentUserLike = true;\n      }\n\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/Donal/Desktop/New/newapp/frontend/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","USERS_LIKES_STATE_CHANGE","CLEAR_DATA","firebase","require","reload","dispatch","clearData","fetchUser","fetchUserPosts","fetchUserFollowing","deletePost","item","getState","Promise","resolve","reject","firestore","collection","doc","auth","currentUser","uid","id","delete","then","catch","type","get","snapshot","exists","data","console","log","orderBy","posts","docs","map","onSnapshot","following","i","length","fetchUsersData","getPosts","found","usersState","users","some","el","user","fetchUsersFollowingPosts","query","_","C_","path","segments","find","fetchUsersFollowingLikes","postId","currentUserLike"],"mappings":"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","sourcesContent":["import { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, CLEAR_DATA } from '../constants/index'\nimport firebase from 'firebase'\nrequire('firebase/firestore')\n\n\nexport function reload() {\n    return ((dispatch) => {\n        dispatch(clearData())\n        dispatch(fetchUser())\n        // dispatch(setNotificationService())\n        dispatch(fetchUserPosts())\n        dispatch(fetchUserFollowing())\n        // dispatch(fetchUserChats())\n    })\n}\n\nexport function deletePost(item) {\n    return ((dispatch, getState) => {\n        return new Promise((resolve, reject) => {\n            firebase.firestore()\n                .collection('posts')\n                .doc(firebase.auth().currentUser.uid)\n                .collection(\"userPosts\")\n                .doc(item.id)\n                .delete()\n                .then(() => {\n                    resolve();\n                }).catch(() => {\n                    reject();\n                })\n        })\n    })\n}\n\nexport function clearData() {\n    return ((dispatch) => {\n        dispatch({ type: CLEAR_DATA })\n    })\n}\nexport function fetchUser() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .get()\n            .then((snapshot) => {\n                if (snapshot.exists) {\n                    dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() })\n                }\n                else {\n                    console.log('does not exist')\n                }\n            })\n    })\n}\n\nexport function fetchUserPosts() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                })\n                dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\n            })\n    })\n}\n\nexport function fetchUserFollowing() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"following\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userFollowing\")\n            .onSnapshot((snapshot) => {\n                let following = snapshot.docs.map(doc => {\n                    const id = doc.id;\n                    return id\n                })\n                dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following });\n                for (let i = 0; i < following.length; i++) {\n                    dispatch(fetchUsersData(following[i], true));\n                }\n            })\n    })\n}\n\nexport function fetchUsersData(uid, getPosts) {\n    return ((dispatch, getState) => {\n        const found = getState().usersState.users.some(el => el.uid === uid);\n        if (!found) {\n            firebase.firestore()\n                .collection(\"users\")\n                .doc(uid)\n                .get()\n                .then((snapshot) => {\n                    if (snapshot.exists) {\n                        let user = snapshot.data();\n                        user.uid = snapshot.id;\n\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user });\n                    }\n                    else {\n                        console.log('does not exist')\n                    }\n                })\n            if (getPosts) {\n                dispatch(fetchUsersFollowingPosts(uid));\n            }\n        }\n    })\n}\n\nexport function fetchUsersFollowingPosts(uid) {\n    return ((dispatch, getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                const uid = snapshot.query._.C_.path.segments[1]\n                const user = getState().usersState.users.find(el => el.uid === uid);\n\n\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data, user }\n                })\n\n                for (let i = 0; i < posts.length; i++) {\n                    dispatch(fetchUsersFollowingLikes(uid, posts[i].id))\n                }\n                dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid })\n\n            })\n    })\n}\n\nexport function fetchUsersFollowingLikes(uid, postId) {\n    return ((dispatch, getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .doc(postId)\n            .collection(\"likes\")\n            .doc(firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot) => {\n                // const postId = snapshot.ZE.path.segments[3];\n\n                let currentUserLike = false;\n                if (snapshot.exists) {\n                    currentUserLike = true;\n                }\n\n                dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike })\n            })\n    })\n}\n"]},"metadata":{},"sourceType":"module"}