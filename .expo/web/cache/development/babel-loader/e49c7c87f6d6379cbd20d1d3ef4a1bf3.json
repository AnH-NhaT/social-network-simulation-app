{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport firebase from 'firebase';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchUser, fetchUserPosts, fetchUserFollowing, clearData } from \"../redux/actions/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FeedScreen from \"./main/Feed\";\nimport ProfileScreen from \"./main/Profile\";\nimport SearchScreen from \"./main/Search\";\nvar Tab = createMaterialBottomTabNavigator();\n\nvar EmptyScreen = function EmptyScreen() {\n  return null;\n};\n\nvar wait = function wait(timeout) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, timeout);\n  });\n};\n\nvar _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    refreshing = _React$useState2[0],\n    setRefreshing = _React$useState2[1];\n\nvar onRefresh = React.useCallback(function () {\n  setRefreshing(true);\n  wait(2000).then(function () {\n    return setRefreshing(false);\n  });\n}, []);\nexport var Main = function (_Component) {\n  _inherits(Main, _Component);\n\n  var _super = _createSuper(Main);\n\n  function Main() {\n    _classCallCheck(this, Main);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Main, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.clearData();\n      this.props.fetchUser();\n      this.props.fetchUserPosts();\n      this.props.fetchUserFollowing();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ScrollView, {\n        style: {\n          height: 3\n        },\n        refreshControl: React.createElement(RefreshControl, {\n          refreshing: refreshing,\n          onRefresh: onRefresh\n        })\n      }, React.createElement(Tab.Navigator, {\n        initialRouteName: \"Feed\",\n        labeled: false,\n        barStyle: {\n          backgroundColor: '#ffff'\n        },\n        activeColor: \"#00cc00\",\n        inactiveColor: \"#00bfff\"\n      }, React.createElement(Tab.Screen, {\n        name: \"Feed\",\n        component: FeedScreen,\n        options: {\n          tabBarIcon: function tabBarIcon(_ref) {\n            var color = _ref.color,\n                size = _ref.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"home\",\n              color: color,\n              size: 26\n            });\n          }\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"Search\",\n        component: SearchScreen,\n        navigation: this.props.navigation,\n        options: {\n          tabBarIcon: function tabBarIcon(_ref2) {\n            var color = _ref2.color,\n                size = _ref2.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"magnify\",\n              color: color,\n              size: 26\n            });\n          }\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"AddContainer\",\n        component: EmptyScreen,\n        listeners: function listeners(_ref3) {\n          var navigation = _ref3.navigation;\n          return {\n            tabPress: function tabPress(event) {\n              event.preventDefault();\n              navigation.navigate(\"Add\");\n            }\n          };\n        },\n        options: {\n          tabBarIcon: function tabBarIcon(_ref4) {\n            var color = _ref4.color,\n                size = _ref4.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"plus-box\",\n              color: color,\n              size: 26\n            });\n          }\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"Profile\",\n        component: ProfileScreen,\n        listeners: function listeners(_ref5) {\n          var navigation = _ref5.navigation;\n          return {\n            tabPress: function tabPress(event) {\n              event.preventDefault();\n              navigation.navigate(\"Profile\", {\n                uid: firebase.auth().currentUser.uid\n              });\n            }\n          };\n        },\n        options: {\n          tabBarIcon: function tabBarIcon(_ref6) {\n            var color = _ref6.color,\n                size = _ref6.size;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"account-circle\",\n              color: color,\n              size: 26\n            });\n          }\n        }\n      })));\n    }\n  }]);\n\n  return Main;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUser: fetchUser,\n    fetchUserPosts: fetchUserPosts,\n    fetchUserFollowing: fetchUserFollowing,\n    clearData: clearData\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(Main);","map":{"version":3,"sources":["C:/Users/Donal/Desktop/newapp/frontend/components/Main.js"],"names":["React","Component","createMaterialBottomTabNavigator","MaterialCommunityIcons","firebase","connect","bindActionCreators","fetchUser","fetchUserPosts","fetchUserFollowing","clearData","FeedScreen","ProfileScreen","SearchScreen","Tab","EmptyScreen","wait","timeout","Promise","resolve","setTimeout","useState","refreshing","setRefreshing","onRefresh","useCallback","then","Main","props","height","backgroundColor","tabBarIcon","color","size","navigation","tabPress","event","preventDefault","navigate","uid","auth","currentUser","mapStateToProps","store","userState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons'\nimport firebase from 'firebase'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchUser, fetchUserPosts, fetchUserFollowing, clearData } from '../redux/actions/index'\nimport { StyleSheet, View, Text, Image, FlatList, TouchableOpacity, RefreshControl, ScrollView } from 'react-native'\n\n\nimport FeedScreen from './main/Feed'\nimport ProfileScreen from './main/Profile'\nimport SearchScreen from './main/Search'\n\nconst Tab = createMaterialBottomTabNavigator();\n\nconst EmptyScreen = () => {\n    return (null)\n}\n\n\nconst wait = (timeout) => {\n    return new Promise(resolve => setTimeout(resolve, timeout));\n}\nconst [refreshing, setRefreshing] = React.useState(false);\nconst onRefresh = React.useCallback(() => {\n    setRefreshing(true);\n    wait(2000).then(() => setRefreshing(false));\n}, []);\n\nexport class Main extends Component {\n    componentDidMount() {\n        this.props.clearData();\n        this.props.fetchUser();\n        this.props.fetchUserPosts();\n        this.props.fetchUserFollowing();\n    }\n    render() {\n        return (\n            <ScrollView\n            style={{ height: 3, }}\n            refreshControl={\n                <RefreshControl\n                    refreshing={refreshing}\n                    onRefresh={onRefresh}\n                />\n            }\n        >\n            <Tab.Navigator initialRouteName=\"Feed\" labeled={false}\n                barStyle={{ backgroundColor: '#ffff' }}\n                activeColor=\"#00cc00\"\n                inactiveColor='#00bfff'\n            >\n\n                <Tab.Screen name=\"Feed\" component={FeedScreen}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"home\" color={color} size={26} />\n                        ),\n                    }} />\n                <Tab.Screen name=\"Search\" component={SearchScreen} navigation={this.props.navigation}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"magnify\" color={color} size={26} />\n                        ),\n                    }} />\n                <Tab.Screen name=\"AddContainer\" component={EmptyScreen}\n                    listeners={({ navigation }) => ({\n                        tabPress: event => {\n                            event.preventDefault();\n                            navigation.navigate(\"Add\")\n                        }\n                    })}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"plus-box\" color={color} size={26} />\n                        ),\n                    }} />\n                <Tab.Screen name=\"Profile\" component={ProfileScreen}\n                    listeners={({ navigation }) => ({\n                        tabPress: event => {\n                            event.preventDefault();\n                            navigation.navigate(\"Profile\", { uid: firebase.auth().currentUser.uid })\n                        }\n                    })}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"account-circle\" color={color} size={26} />\n                        ),\n                    }} />\n            </Tab.Navigator>\n            </ScrollView>\n        )\n    }\n}\n\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser\n})\nconst mapDispatchProps = (dispatch) => bindActionCreators({ fetchUser, fetchUserPosts, fetchUserFollowing, clearData }, dispatch);\n\n\nexport default connect(mapStateToProps, mapDispatchProps)(Main);\n"]},"metadata":{},"sourceType":"module"}