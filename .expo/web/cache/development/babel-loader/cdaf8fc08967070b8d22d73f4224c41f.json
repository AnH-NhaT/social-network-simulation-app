{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport firebase from 'firebase';\n\nrequire(\"firebase/firestore\");\n\nrequire(\"firebase/firebase-storage\");\n\nexport default function Save(props) {\n  var wait = function wait(timeout) {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, timeout);\n    });\n  };\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      refreshing = _React$useState2[0],\n      setRefreshing = _React$useState2[1];\n\n  var onRefresh = React.useCallback(function () {\n    setRefreshing(true);\n    wait(2000).then(function () {\n      return setRefreshing(false);\n    });\n  }, []);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      caption = _useState2[0],\n      setCaption = _useState2[1];\n\n  var uploadImage = function uploadImage() {\n    var uri, childPath, response, blob, task, taskProgress, taskCompleted, taskError;\n    return _regeneratorRuntime.async(function uploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            uri = props.route.params.image;\n            childPath = \"post/\" + firebase.auth().currentUser.uid + \"/\" + Math.random().toString(36);\n            console.log(childPath);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 8:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                savePostData(snapshot);\n                console.log(snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log(snapshot);\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePostData = function savePostData(downloadURL) {\n    firebase.firestore().collection('posts').doc(firebase.auth().currentUser.uid).collection(\"userPosts\").add({\n      downloadURL: downloadURL,\n      caption: caption,\n      likesCount: 0,\n      creation: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      props.navigation.popToTop();\n    });\n  };\n\n  return React.createElement(ScrollView, {\n    style: {\n      height: 3\n    },\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: onRefresh\n    })\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: props.route.params.image\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Write Some Caption...\",\n    onChangeText: function onChangeText(caption) {\n      return setCaption(caption);\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return uploadImage();\n    }\n  }, React.createElement(Text, null, \"PUSHING\"))));\n}\nvar styles = S;","map":{"version":3,"sources":["C:/Users/Donal/Desktop/newapp/frontend/components/main/Save.js"],"names":["React","useState","firebase","require","Save","props","wait","timeout","Promise","resolve","setTimeout","refreshing","setRefreshing","onRefresh","useCallback","then","caption","setCaption","uploadImage","uri","route","params","image","childPath","auth","currentUser","uid","Math","random","toString","console","log","fetch","response","blob","task","storage","ref","child","put","taskProgress","snapshot","bytesTransferred","taskCompleted","getDownloadURL","savePostData","taskError","on","downloadURL","firestore","collection","doc","add","likesCount","creation","FieldValue","serverTimestamp","navigation","popToTop","height","flex","styles","S"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { View, TextInput, Image, ScrollView, RefreshControl, TouchableOpacity, StyleSheet } from 'react-native'\n\nimport firebase from 'firebase'\nrequire(\"firebase/firestore\")\nrequire(\"firebase/firebase-storage\")\n\n\nexport default function Save(props) {\n\n\n    const wait = (timeout) => {\n        return new Promise(resolve => setTimeout(resolve, timeout));\n    }\n    const [refreshing, setRefreshing] = React.useState(false);\n    const onRefresh = React.useCallback(() => {\n        setRefreshing(true);\n        wait(2000).then(() => setRefreshing(false));\n    }, []);\n\n\n\n\n    const [caption, setCaption] = useState(\"\")\n\n    const uploadImage = async () => {\n        const uri = props.route.params.image;\n        const childPath = `post/${firebase.auth().currentUser.uid}/${Math.random().toString(36)}`;\n        console.log(childPath)\n\n        const response = await fetch(uri);\n        const blob = await response.blob();\n\n        const task = firebase\n            .storage()\n            .ref()\n            .child(childPath)\n            .put(blob);\n\n        const taskProgress = snapshot => {\n            console.log(`transferred: ${snapshot.bytesTransferred}`)\n        }\n\n        const taskCompleted = () => {\n            task.snapshot.ref.getDownloadURL().then((snapshot) => {\n                savePostData(snapshot);\n                console.log(snapshot)\n            })\n        }\n\n        const taskError = snapshot => {\n            console.log(snapshot)\n        }\n\n        task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n    }\n\n    const savePostData = (downloadURL) => {\n\n        firebase.firestore()\n            .collection('posts')\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .add({\n                downloadURL,\n                caption,\n                likesCount: 0,\n                creation: firebase.firestore.FieldValue.serverTimestamp()\n            }).then((function () {\n                props.navigation.popToTop()\n            }))\n    }\n    return (\n        <ScrollView\n            style={{ height: 3, }}\n            refreshControl={\n                <RefreshControl\n                    refreshing={refreshing}\n                    onRefresh={onRefresh}\n                />\n            }\n        >\n            <View style={{ flex: 1 }}>\n                <Image source={{ uri: props.route.params.image }} />\n                <TextInput\n                    placeholder=\"Write Some Caption...\"\n                    onChangeText={(caption) => setCaption(caption)}\n                />\n\n                <TouchableOpacity\n                    onPress={() => uploadImage()} >\n                    <Text>PUSHING</Text>\n                </TouchableOpacity>\n            </View>\n        </ScrollView>\n    )\n}\nconst styles = S\n"]},"metadata":{},"sourceType":"module"}